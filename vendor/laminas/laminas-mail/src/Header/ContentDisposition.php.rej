--- src/Header/ContentDisposition.php
+++ src/Header/ContentDisposition.php
@@ -137,26 +137,34 @@ public function getFieldValue($format = HeaderInterface::FORMAT_RAW)
                 }
             } else {
                 // Use 'continuation' per RFC 2231
-                $maxValueLength = strlen($value);
-                do {
-                    $maxValueLength = ceil(0.6 * $maxValueLength);
-                } while ($maxValueLength > self::MAX_PARAMETER_LENGTH);
-
                 if ($valueIsEncoded) {
-                    $encodedLength = strlen($value);
                     $value = HeaderWrap::mimeDecodeValue($value);
-                    $decodedLength = strlen($value);
-                    $maxValueLength -= ($encodedLength - $decodedLength);
                 }
 
-                $valueParts = str_split($value, $maxValueLength);
                 $i = 0;
-                foreach ($valueParts as $valuePart) {
-                    $attributePart = $attribute . '*' . $i++;
-                    if ($valueIsEncoded) {
-                        $valuePart = $this->getEncodedValue($valuePart);
+                $fullLength = mb_strlen($value, 'UTF-8');
+                while ($fullLength > 0) {
+                    $attributePart = $attribute . '*' . $i++ . '="';
+                    $attLen = mb_strlen($attributePart, 'UTF-8');
+
+                    $subPos = 1;
+                    $valuePart = '';
+                    while ($subPos <= $fullLength) {
+                        $sub = mb_substr($value, 0, $subPos, 'UTF-8');
+                        if ($valueIsEncoded) {
+                            $sub = $this->getEncodedValue($sub);
+                        }
+                        if ($attLen + mb_strlen($sub, 'UTF-8') >= self::MAX_PARAMETER_LENGTH) {
+                            $subPos--;
+                            break;
+                        }
+                        $subPos++;
+                        $valuePart = $sub;
                     }
-                    $result .= sprintf(';%s%s="%s"', Headers::FOLDING, $attributePart, $valuePart);
+
+                    $value = mb_substr($value, $subPos, null, 'UTF-8');
+                    $fullLength = mb_strlen($value, 'UTF-8');
+                    $result .= ';' . Headers::FOLDING . $attributePart . $valuePart . '"';
                 }
             }
         }
--- src/Header/ContentDisposition.php
+++ src/Header/ContentDisposition.php
@@ -87,6 +87,13 @@ public static function fromString($headerLine)
                     }
                     $value .= $values[$i];
                 }
+
+                // Fix malformed header
+                if (strncmp($value, '=?', 2) === 0) {
+                    $value = preg_replace('/\?\=\=\?[\w-]+\?\w\?/', '', $value);
+                    $value = HeaderWrap::mimeDecodeValue($value);
+                }
+
                 $header->setParameter($name, $value);
             }
         }
