{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/bundles/jquery-gantt.js","webpack:///./lib/jqueryplugins/jquery-gantt/js/jquery.fn.gantt.js","webpack:///./lib/jqueryplugins/jquery-gantt/css/style.css?9e2a"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,gCAAgC;AAChC;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAO,CAAC,GAAkD;AAC1D,mBAAO,CAAC,GAA6C;;;;;;;;ACjCrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,oCAAoC;AACzD,wBAAwB,uCAAuC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ,EAAE;AACpD,8CAA8C,QAAQ,EAAE;AACxD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA,wCAAwC;AACxC,sDAAsD,sBAAsB,EAAE;AAC9E,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mCAAmC;AAC3E;AACA;AACA;AACA;;AAEA,gCAAgC,8BAA8B;AAC9D;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA,aAAa;;AAEb;AACA;AACA,wFAAwF;;AAExF;AACA;AACA;AACA;AACA,mDAAmD,8BAA8B,EAAE;;AAEnF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mDAAmD,SAAS;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0FAA0F;AAC1F;AACA;AACA;AACA,0FAA0F;AAC1F;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kFAAkF;AAClF;;AAEA;AACA;AACA,kFAAkF;AAClF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mDAAmD,SAAS;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,mDAAmD,SAAS;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;;AAEvC,mDAAmD,SAAS;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA,uEAAuE;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,qCAAqC;AACrC;AACA,kDAAkD;AAClD;AACA;AACA,qCAAqC;AACrC;AACA,+CAA+C,IAAI;AACnD;AACA;AACA;AACA,yCAAyC;AACzC;AACA,yCAAyC;AACzC;AACA,yCAAyC;AACzC;AACA;AACA,qCAAqC;AACrC;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,yCAAyC;AACzC;AACA,yCAAyC;AACzC;AACA,yCAAyC;AACzC;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,yCAAyC;AACzC;AACA,yCAAyC;AACzC;AACA,yCAAyC;AACzC;AACA;AACA,qCAAqC;AACrC;AACA,+CAA+C,IAAI;AACnD;AACA;AACA;AACA,yCAAyC;AACzC;AACA,yCAAyC;AACzC;AACA,yCAAyC;AACzC;AACA;AACA,qCAAqC;AACrC;AACA,gDAAgD;AAChD;AACA;AACA,qCAAqC;AACrC;AACA,gDAAgD;AAChD;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA,uCAAuC;AACvC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,6BAA6B;AAC7B;AACA,yCAAyC,IAAI;AAC7C;AACA;AACA,6BAA6B;AAC7B;AACA,uCAAuC,IAAI;AAC3C;AACA;AACA,6BAA6B;AAC7B;AACA,uCAAuC;AACvC;AACA;AACA,6BAA6B;AAC7B;AACA,0CAA0C;AAC1C;AACA;AACA,6BAA6B;AAC7B;AACA,uCAAuC;AACvC;AACA;AACA,6BAA6B;AAC7B;AACA,uCAAuC,IAAI;AAC3C;AACA;AACA,6BAA6B;AAC7B;AACA,uCAAuC,MAAM;AAC7C;AACA;AACA,6BAA6B;AAC7B;AACA,wCAAwC;AACxC;AACA;AACA,6BAA6B;AAC7B;AACA,wCAAwC;AACxC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,0CAA0C,wCAAwC;;AAElF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,0CAA0C,wCAAwC;;AAElF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,0CAA0C,wCAAwC;;AAElF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,wCAAwC;;AAElF;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;;AAEzB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA,wCAAwC,6BAA6B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,qBAAqB;AACjE;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,OAAO;;AAE/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,aAAa;;;AAGb;AACA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,wDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,oCAAoC;AACpC;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,6BAA6B;AAC7B,6BAA6B;AAC7B,+BAA+B;AAC/B,oCAAoC;AACpC,6BAA6B;AAC7B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,SAAS;;AAET;AACA,CAAC;;;;;;;;ACtuDD,uC","file":"jquery-gantt.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 505);\n","/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\n// Gantt jQuery plugin\nrequire('../jqueryplugins/jquery-gantt/js/jquery.fn.gantt');\nrequire('../jqueryplugins/jquery-gantt/css/style.css');\n","/**\n * jQuery Gantt Chart\n *\n * @see http://taitems.github.io/jQuery.Gantt/\n * @license MIT\n */\n/*jshint camelcase:true, freeze:true, jquery:true */\n(function ($, undefined) {\n    \"use strict\";\n\n    var UTC_DAY_IN_MS = 24 * 60 * 60 * 1000;\n\n    // custom selector `:findday` used to match on specified day in ms.\n    //\n    // The selector is passed a date in ms and elements are added to the\n    // selection filter if the element date matches, as determined by the\n    // id attribute containing a parsable date in ms.\n    function findDay(elt, text) {\n        var cd = new Date(parseInt(text, 10));\n        cd.setHours(0, 0, 0, 0);\n        var id = $(elt).attr(\"id\") || \"\";\n        var si = id.indexOf(\"-\") + 1;\n        var ed = new Date(parseInt(id.substring(si, id.length), 10));\n        ed.setHours(0, 0, 0, 0);\n        return cd.getTime() === ed.getTime();\n    }\n    $.expr[':'].findday = $.expr.createPseudo ?\n        $.expr.createPseudo(function(text) {\n            return function(elt) {\n                return findDay(elt, text);\n            };\n        }) :\n        function(elt, i, match) {\n            return findDay(elt, match[3]);\n        };\n\n    // custom selector `:findweek` used to match on specified week in ms.\n    function findWeek(elt, text) {\n        var cd = new Date(parseInt(text, 10));\n        var y = cd.getFullYear();\n        var w = cd.getWeekOfYear();\n        var m = cd.getMonth();\n        if (m === 11 && w === 1) {\n            y++;\n        } else if (!m && w > 51) {\n            y--;\n        }\n        cd = y + \"-\" + w;\n        var id = $(elt).attr(\"id\") || \"\";\n        var si = id.indexOf(\"-\") + 1;\n        var ed = id.substring(si, id.length);\n        return cd === ed;\n    }\n    $.expr[':'].findweek = $.expr.createPseudo ?\n        $.expr.createPseudo(function(text) {\n            return function(elt) {\n                return findWeek(elt, text);\n            };\n        }) :\n        function(elt, i, match) {\n            return findWeek(elt, match[3]);\n        };\n\n    // custom selector `:findmonth` used to match on specified month in ms.\n    function findMonth(elt, text) {\n        var cd = new Date(parseInt(text, 10));\n        cd = cd.getFullYear() + \"-\" + cd.getMonth();\n        var id = $(elt).attr(\"id\") || \"\";\n        var si = id.indexOf(\"-\") + 1;\n        var ed = id.substring(si, id.length);\n        return cd === ed;\n    }\n    $.expr[':'].findmonth = $.expr.createPseudo ?\n        $.expr.createPseudo(function(text) {\n            return function(elt) {\n                return findMonth(elt, text);\n            };\n        }) :\n        function(elt, i, match) {\n            return findMonth(elt, match[3]);\n        };\n\n    // Date prototype helpers\n    // ======================\n\n    // `getWeekId` returns a string in the form of 'dh-YYYY-WW', where WW is\n    // the week # for the year.\n    // It is used to add an id to the week divs\n    Date.prototype.getWeekId = function () {\n        var y = this.getFullYear();\n        var w = this.getWeekOfYear();\n        var m = this.getMonth();\n        if (m === 11 && w === 1) {\n            y++;\n        } else if (!m && w > 51) {\n            y--;\n        }\n        return 'dh-' + y + \"-\" + w;\n    };\n\n    // `getRepDate` returns the milliseconds since the epoch for a given date\n    // depending on the active scale\n    Date.prototype.getRepDate = function (scale) {\n        switch (scale) {\n        case \"hours\":\n            return this.getTime();\n        case \"weeks\":\n            return this.getDayForWeek().getTime();\n        case \"months\":\n            return new Date(this.getFullYear(), this.getMonth(), 1).getTime();\n        case \"days\":\n            /* falls through */\n        default:\n            return this.getTime();\n        }\n    };\n\n    // `getDayOfYear` returns the day number for the year\n    Date.prototype.getDayOfYear = function () {\n        var year = this.getFullYear();\n        return (Date.UTC(year, this.getMonth(), this.getDate()) -\n                Date.UTC(year, 0, 0)) / UTC_DAY_IN_MS;\n    };\n\n    // Use ISO week by default\n    //TODO: make these options.\n    var firstDay = 1; // ISO week starts with Monday (1); use Sunday (0) for, e.g., North America\n    var weekOneDate = 4; // ISO week one always contains 4 Jan; use 1 Jan for, e.g., North America\n\n    // `getWeekOfYear` returns the week number for the year\n    //TODO: fix bug when firstDay=6/weekOneDate=1 : https://github.com/moment/moment/issues/2115\n    Date.prototype.getWeekOfYear = function () {\n        var year = this.getFullYear(),\n            month = this.getMonth(),\n            date = this.getDate(),\n            day = this.getDay();\n        //var diff = weekOneDate - day + 7 * (day < firstDay ? -1 : 1);\n        var diff = weekOneDate - day;\n        if (day < firstDay) {\n            diff -= 7;\n        }\n        if (diff + 7 < weekOneDate - firstDay) {\n            diff += 7;\n        }\n        return Math.ceil(new Date(year, month, date + diff).getDayOfYear() / 7);\n    };\n\n    // `getDayForWeek` returns the first day of this Date's week\n    Date.prototype.getDayForWeek = function () {\n        var day = this.getDay();\n        var diff = (day < firstDay ? -7 : 0) + firstDay - day;\n        return new Date( this.getFullYear(), this.getMonth(), this.getDate() + diff );\n    };\n\n    // fixes https://github.com/taitems/jQuery.Gantt/issues/62\n    function ktkGetNextDate(currentDate, scaleStep) {\n        for(var minIncrements = 1;; minIncrements++) {\n            var nextDate = new Date(currentDate);\n            nextDate.setHours(currentDate.getHours() + scaleStep * minIncrements);\n\n            if (nextDate.getTime() !== currentDate.getTime()) {\n                return nextDate;\n            }\n\n            // If code reaches here, it's because current didn't really increment (invalid local time) because of daylight-saving adjustments\n            // => retry adding 2, 3, 4 hours, and so on (until nextDate > current)\n        }\n    }\n\n    $.fn.gantt = function (options) {\n\n        var scales = [\"hours\", \"days\", \"weeks\", \"months\"];\n        //Default settings\n        var settings = {\n            source: [],\n            holidays: [],\n            // paging\n            itemsPerPage: 7,\n            // localisation\n            dow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n            months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n            waitText: \"Please wait...\",\n            // navigation\n            navigate: \"buttons\",\n            scrollToToday: true,\n            // cookie options\n            useCookie: false,\n            cookieKey: \"jquery.fn.gantt\",\n            // scale parameters\n            scale: \"days\",\n            maxScale: \"months\",\n            minScale: \"hours\",\n            // callbacks\n            onItemClick: function (data) { return; },\n            onAddClick: function (dt, rowId) { return; },\n            onRender: $.noop\n        };\n\n        // read options\n        $.extend(settings, options);\n\n        // can't use cookie if don't have `$.cookie`\n        settings.useCookie = settings.useCookie && $.isFunction($.cookie);\n\n        // Grid management\n        // ===============\n\n        // Core object is responsible for navigation and rendering\n        var core = {\n            // Return the element whose topmost point lies under the given point\n            // Normalizes for old browsers (NOTE: doesn't work when element is outside viewport)\n            //TODO: https://github.com/taitems/jQuery.Gantt/issues/137\n            elementFromPoint: (function(){ // IIFE\n                // version for normal browsers\n                if (document.compatMode === \"CSS1Compat\") {\n                    return function (x, y) {\n                        x -= window.pageXOffset;\n                        y -= window.pageYOffset;\n                        return document.elementFromPoint(x, y);\n                    };\n                }\n                // version for older browsers\n                return function (x, y) {\n                    x -= $(document).scrollLeft();\n                    y -= $(document).scrollTop();\n                    return document.elementFromPoint(x, y);\n                };\n            })(),\n\n            // **Create the chart**\n            create: function (element) {\n\n                // Initialize data with a json object or fetch via an xhr\n                // request depending on `settings.source`\n                if (typeof settings.source !== \"string\") {\n                    element.data = settings.source;\n                    core.init(element);\n                } else {\n                    $.getJSON(settings.source, function (jsData) {\n                        element.data = jsData;\n                        core.init(element);\n                    });\n                }\n            },\n\n            // **Setup the initial view**\n            // Here we calculate the number of rows, pages and visible start\n            // and end dates once the data are ready\n            init: function (element) {\n                element.rowsNum = element.data.length;\n                element.pageCount = Math.ceil(element.rowsNum / settings.itemsPerPage);\n                element.rowsOnLastPage = element.rowsNum - (Math.floor(element.rowsNum / settings.itemsPerPage) * settings.itemsPerPage);\n\n                element.dateStart = tools.getMinDate(element);\n                element.dateEnd = tools.getMaxDate(element);\n\n\n                /* core.render(element); */\n                core.waitToggle(element, function () { core.render(element); });\n            },\n\n            // **Render the grid**\n            render: function (element) {\n                var content = $('<div class=\"fn-content\"/>');\n                var $leftPanel = core.leftPanel(element);\n                content.append($leftPanel);\n                var $rightPanel = core.rightPanel(element, $leftPanel);\n                var mLeft, hPos;\n\n                content.append($rightPanel);\n                content.append(core.navigation(element));\n\n                var $dataPanel = $rightPanel.find(\".dataPanel\");\n\n                element.gantt = $('<div class=\"fn-gantt\" />').append(content);\n\n                $(element).empty().append(element.gantt);\n\n                element.scrollNavigation.panelMargin = parseInt($dataPanel.css(\"margin-left\").replace(\"px\", \"\"), 10);\n                element.scrollNavigation.panelMaxPos = ($dataPanel.width() - $rightPanel.width());\n\n                element.scrollNavigation.canScroll = ($dataPanel.width() > $rightPanel.width());\n\n                core.markNow(element);\n                core.fillData(element, $dataPanel, $leftPanel);\n\n                // Set a cookie to record current position in the view\n                if (settings.useCookie) {\n                    var sc = $.cookie(settings.cookieKey + \"ScrollPos\");\n                    if (sc) {\n                        element.hPosition = sc;\n                    }\n                }\n\n                // Scroll the grid to today's date\n                if (settings.scrollToToday) {\n                    core.navigateTo(element, 'now');\n                    core.scrollPanel(element, 0);\n                // or, scroll the grid to the left most date in the panel\n                } else {\n                    if (element.hPosition !== 0) {\n                        if (element.scaleOldWidth) {\n                            mLeft = ($dataPanel.width() - $rightPanel.width());\n                            hPos = mLeft * element.hPosition / element.scaleOldWidth;\n                            element.hPosition = hPos > 0 ? 0 : hPos;\n                            element.scaleOldWidth = null;\n                        }\n                        $dataPanel.css({ \"margin-left\": element.hPosition });\n                        element.scrollNavigation.panelMargin = element.hPosition;\n                    }\n                    core.repositionLabel(element);\n                }\n\n                $dataPanel.css({ height: $leftPanel.height() });\n                core.waitToggle(element);\n                settings.onRender();\n            },\n\n            // Create and return the left panel with labels\n            leftPanel: function (element) {\n                /* Left panel */\n                var ganttLeftPanel = $('<div class=\"leftPanel\"/>')\n                    .append($('<div class=\"row spacer\"/>')\n                    .css(\"height\", tools.getCellSize() * element.headerRows)\n                    .css(\"width\", \"100%\"));\n\n                var entries = [];\n                $.each(element.data, function (i, entry) {\n                    if (i >= element.pageNum * settings.itemsPerPage &&\n                        i < (element.pageNum * settings.itemsPerPage + settings.itemsPerPage)) {\n                        var dataId = ('id' in entry) ? '\" data-id=\"' + entry.id : '';\n                        entries.push(\n                            '<div class=\"row name row' + i +\n                            (entry.desc ? '' : (' fn-wide '+dataId)) +\n                            '\" id=\"rowheader' + i +\n                            '\" data-offset=\"' + i % settings.itemsPerPage * tools.getCellSize() + '\">' +\n                            '<span class=\"fn-label' +\n                            (entry.cssClass ? ' ' + entry.cssClass : '') + '\">' +\n                            (entry.name || '') +\n                            '</span>' +\n                            '</div>');\n\n                        if (entry.desc) {\n                            entries.push(\n                                '<div class=\"row desc row' + i +\n                                ' \" id=\"RowdId_' + i + dataId + '\">' +\n                                '<span class=\"fn-label' +\n                                (entry.cssClass ? ' ' + entry.cssClass : '') + '\">' +\n                                entry.desc +\n                                '</span>' +\n                                '</div>');\n                        }\n\n                    }\n                });\n                return ganttLeftPanel.append(entries.join(\"\"));\n            },\n\n            // Create and return the data panel element\n            dataPanel: function (element, width) {\n                var dataPanel = $('<div class=\"dataPanel\" style=\"width: ' + width + 'px;\"/>');\n\n                // Handle mousewheel events for scrolling the data panel\n                var wheel = 'onwheel' in element ?\n                    'wheel' : document.onmousewheel !== undefined ?\n                    'mousewheel' : 'DOMMouseScroll';\n                $(element).on(wheel, function (e) { core.wheelScroll(element, e); });\n\n                // Handle click events and dispatch to registered `onAddClick` function\n                dataPanel.click(function (e) {\n\n                    e.stopPropagation();\n                    var corrX/* <- never used? */, corrY;\n                    var leftpanel = $(element).find(\".fn-gantt .leftPanel\");\n                    var datapanel = $(element).find(\".fn-gantt .dataPanel\");\n                    switch (settings.scale) {\n                    case \"months\":\n                        corrY = tools.getCellSize();\n                        break;\n                    case \"hours\":\n                        corrY = tools.getCellSize() * 4;\n                        break;\n                    case \"days\":\n                        corrY = tools.getCellSize() * 3;\n                        break;\n                    case \"weeks\":\n                        /* falls through */\n                    default:\n                        corrY = tools.getCellSize() * 2;\n                    }\n\n                    /* Adjust, so get middle of elm\n                    corrY -= Math.floor(tools.getCellSize() / 2);\n                    */\n\n                    // Find column where click occurred\n                    var col = core.elementFromPoint(e.pageX, datapanel.offset().top + corrY);\n                    // Was the label clicked directly?\n                    if (col.className === \"fn-label\") {\n                        col = $(col.parentNode);\n                    } else {\n                        col = $(col);\n                    }\n\n                    var dt = col.data(\"repdate\");\n                    // Find row where click occurred\n                    var row = core.elementFromPoint(leftpanel.offset().left + leftpanel.width() - 10, e.pageY);\n                    // Was the label clicked directly?\n                    if (row.className.indexOf(\"fn-label\") === 0) {\n                        row = $(row.parentNode);\n                    } else {\n                        row = $(row);\n                    }\n                    var rowId = row.data('id');\n\n                    // Dispatch user registered function with the DateTime in ms\n                    // and the id if the clicked object is a row\n                    settings.onAddClick(dt, rowId);\n                });\n                return dataPanel;\n            },\n\n            // Creates and return the right panel containing the year/week/day header\n            rightPanel: function (element, leftPanel /* <- never used? */) {\n                var range = null;\n                // Days of the week have a class of one of\n                // `sn` (Sunday), `sa` (Saturday), or `wd` (Weekday)\n                var dowClass = [\"sn\", \"wd\", \"wd\", \"wd\", \"wd\", \"wd\", \"sa\"];\n                //unused: was someone planning to allow styles to stretch to the bottom of the chart?\n                //var gridDowClass = [\" sn\", \"\", \"\", \"\", \"\", \"\", \" sa\"];\n\n                var yearArr = [];\n                var scaleUnitsThisYear = 0;\n\n                var monthArr = [];\n                var scaleUnitsThisMonth = 0;\n\n                var dayArr = [];\n                var hoursInDay = 0;\n\n                var dowArr = [];\n                var horArr = [];\n\n                var today = new Date();\n                today.setHours(0, 0, 0, 0);\n\n                // reused variables\n                var $row = $('<div class=\"row header\"></div>');\n                var i, len;\n                var year, month, week, day;\n                var rday, dayClass;\n                var dataPanel;\n\n                // Setup the headings based on the chosen `settings.scale`\n                switch (settings.scale) {\n                // **Hours**\n                case \"hours\":\n                    range = tools.parseTimeRange(element.dateStart, element.dateEnd, element.scaleStep);\n\n                    year = range[0].getFullYear();\n                    month = range[0].getMonth();\n                    day = range[0];\n\n                    for (i = 0, len = range.length; i < len; i++) {\n                        rday = range[i];\n\n                        // Fill years\n                        var rfy = rday.getFullYear();\n                        if (rfy !== year) {\n                            yearArr.push(\n                                '<div class=\"row header year\" style=\"width: ' +\n                                tools.getCellSize() * scaleUnitsThisYear +\n                                'px;\"><div class=\"fn-label\">' +\n                                year +\n                                '</div></div>');\n\n                            year = rfy;\n                            scaleUnitsThisYear = 0;\n                        }\n                        scaleUnitsThisYear++;\n\n\n                        // Fill months\n                        var rm = rday.getMonth();\n                        if (rm !== month) {\n                            monthArr.push(\n                                '<div class=\"row header month\" style=\"width: ' +\n                                tools.getCellSize() * scaleUnitsThisMonth + 'px\"><div class=\"fn-label\">' +\n                                settings.months[month] +\n                                '</div></div>');\n\n                            month = rm;\n                            scaleUnitsThisMonth = 0;\n                        }\n                        scaleUnitsThisMonth++;\n\n                        // Fill days & hours\n                        var rgetDay = rday.getDay();\n                        var getDay = day.getDay();\n                        if (rgetDay !== getDay) {\n                            dayClass = (today - day === 0) ?\n                                \"today\" : tools.isHoliday( day.getTime() ) ?\n                                \"holiday\" : dowClass[getDay];\n\n                            dayArr.push(\n                                '<div class=\"row date ' + dayClass + '\" ' +\n                                'style=\"width: ' + tools.getCellSize() * hoursInDay + 'px;\">' +\n                                '<div class=\"fn-label\">' + day.getDate() + '</div></div>');\n                            dowArr.push(\n                                '<div class=\"row day ' + dayClass + '\" ' +\n                                'style=\"width: ' + tools.getCellSize() * hoursInDay + 'px;\">' +\n                                '<div class=\"fn-label\">' + settings.dow[getDay] + '</div></div>');\n\n                            day = rday;\n                            hoursInDay = 0;\n                        }\n                        hoursInDay++;\n\n                        dayClass = dowClass[rgetDay];\n                        if (tools.isHoliday(rday)) {\n                            dayClass = \"holiday\";\n                        }\n                        horArr.push(\n                            '<div class=\"row day ' +\n                            dayClass +\n                            '\" id=\"dh-' +\n                            rday.getTime() +\n                            '\" data-offset=\"' + i * tools.getCellSize() +\n                            '\" data-repdate=\"' + rday.getRepDate(settings.scale) +\n                            '\"><div class=\"fn-label\">' +\n                            rday.getHours() +\n                            '</div></div>');\n                    }\n\n                    // Last year\n                    yearArr.push(\n                        '<div class=\"row header year\" style=\"width: ' +\n                        tools.getCellSize() * scaleUnitsThisYear + 'px;\"><div class=\"fn-label\">' +\n                        year +\n                        '</div></div>');\n\n                    // Last month\n                    monthArr.push(\n                        '<div class=\"row header month\" style=\"width: ' +\n                        tools.getCellSize() * scaleUnitsThisMonth + 'px\"><div class=\"fn-label\">' +\n                        settings.months[month] +\n                        '</div></div>');\n\n                    dayClass = dowClass[day.getDay()];\n\n                    if ( tools.isHoliday(day) ) {\n                        dayClass = \"holiday\";\n                    }\n\n                    dayArr.push(\n                        '<div class=\"row date ' + dayClass + '\" ' +\n                        'style=\"width: ' + tools.getCellSize() * hoursInDay + 'px;\">' +\n                        '<div class=\"fn-label\">' + day.getDate() + '</div></div>');\n\n                    dowArr.push(\n                        '<div class=\"row day ' + dayClass + '\" ' +\n                        'style=\"width: ' + tools.getCellSize() * hoursInDay + 'px;\">' +\n                        '<div class=\"fn-label\">' + settings.dow[day.getDay()] + '</div></div>');\n\n                    dataPanel = core.dataPanel(element, range.length * tools.getCellSize());\n\n                    // Append panel elements\n                    dataPanel.append(\n                        $row.clone().html(yearArr.join(\"\")),\n                        $row.clone().html(monthArr.join(\"\")),\n                        $row.clone().html(dayArr.join(\"\")),\n                        $row.clone().html(dowArr.join(\"\")),\n                        $row.clone().html(horArr.join(\"\"))\n                    );\n                    break;\n\n                // **Weeks**\n                case \"weeks\":\n                    range = tools.parseWeeksRange(element.dateStart, element.dateEnd);\n                    year = range[0].getFullYear();\n                    month = range[0].getMonth();\n                    week = range[0].getWeekOfYear();\n                    var diff;\n\n                    for (i = 0, len = range.length; i < len; i++) {\n                        rday = range[i];\n\n                        // Fill years\n                        if (week > (week = rday.getWeekOfYear())) {\n                            // partial weeks to subtract from year header\n                            diff = rday.getDate() - 1;\n                            // offset one month (December) if week starts in last year\n                            diff -= !rday.getMonth() ? 0 : 31;\n                            diff /= 7;\n                            yearArr.push(\n                                '<div class=\"row header year\" style=\"width: ' +\n                                tools.getCellSize() * (scaleUnitsThisYear - diff) +\n                                'px;\"><div class=\"fn-label\">' +\n                                year +\n                                '</div></div>');\n                            year++;\n                            scaleUnitsThisYear = diff;\n                        }\n                        scaleUnitsThisYear++;\n\n                        // Fill months\n                        if (rday.getMonth() !== month) {\n                            // partial weeks to subtract from month header\n                            diff = rday.getDate() - 1;\n                            // offset one week if week starts in last month\n                            //diff -= (diff <= 6) ? 0 : 7;\n                            diff /= 7;\n                            monthArr.push(\n                                '<div class=\"row header month\" style=\"width:' +\n                                tools.getCellSize() * (scaleUnitsThisMonth - diff) +\n                                'px;\"><div class=\"fn-label\">' +\n                                settings.months[month] +\n                                '</div></div>');\n                            month = rday.getMonth();\n                            scaleUnitsThisMonth = diff;\n                        }\n                        scaleUnitsThisMonth++;\n\n                        // Fill weeks\n                        dayArr.push(\n                            '<div class=\"row day wd\"' +\n                            ' id=\"' + rday.getWeekId() +\n                            '\" data-offset=\"' + i * tools.getCellSize() +\n                            '\" data-repdate=\"' + rday.getRepDate(settings.scale) + '\">' +\n                            '<div class=\"fn-label\">' + week + '</div></div>');\n                    }\n\n                    // Last year\n                    yearArr.push(\n                        '<div class=\"row header year\" style=\"width: ' +\n                        tools.getCellSize() * scaleUnitsThisYear + 'px;\"><div class=\"fn-label\">' +\n                        year +\n                        '</div></div>');\n\n                    // Last month\n                    monthArr.push(\n                        '<div class=\"row header month\" style=\"width: ' +\n                        tools.getCellSize() * scaleUnitsThisMonth + 'px\"><div class=\"fn-label\">' +\n                        settings.months[month] +\n                        '</div></div>');\n\n                    dataPanel = core.dataPanel(element, range.length * tools.getCellSize());\n\n                    // Append panel elements\n                    dataPanel.append(\n                        $row.clone().html(yearArr.join(\"\")),\n                        $row.clone().html(monthArr.join(\"\")),\n                        $row.clone().html(dayArr.join(\"\"))\n                    );\n                    break;\n\n                // **Months**\n                case 'months':\n                    range = tools.parseMonthsRange(element.dateStart, element.dateEnd);\n\n                    year = range[0].getFullYear();\n                    month = range[0].getMonth();\n\n                    for (i = 0, len = range.length; i < len; i++) {\n                        rday = range[i];\n\n                        // Fill years\n                        if (rday.getFullYear() !== year) {\n                            yearArr.push(\n                                '<div class=\"row header year\" style=\"width: ' +\n                                tools.getCellSize() * scaleUnitsThisYear +\n                                'px;\"><div class=\"fn-label\">' +\n                                year +\n                                '</div></div>');\n                            year = rday.getFullYear();\n                            scaleUnitsThisYear = 0;\n                        }\n                        scaleUnitsThisYear++;\n                        monthArr.push(\n                            '<div class=\"row day wd\" id=\"dh-' + tools.genId(rday) +\n                            '\" data-offset=\"' + i * tools.getCellSize() +\n                            '\" data-repdate=\"' + rday.getRepDate(settings.scale) + '\">' +\n                            (1 + rday.getMonth()) + '</div>');\n                    }\n\n                    // Last year\n                    yearArr.push(\n                        '<div class=\"row header year\" style=\"width: ' +\n                        tools.getCellSize() * scaleUnitsThisYear + 'px;\"><div class=\"fn-label\">' +\n                        year +\n                        '</div></div>');\n\n                    // Last month\n                    monthArr.push(\n                        '<div class=\"row header month\" style=\"width: ' +\n                        tools.getCellSize() * scaleUnitsThisMonth + 'px\"><div class=\"fn-label\">' +\n                        settings.months[month] +\n                        '</div></div>');\n\n                    dataPanel = core.dataPanel(element, range.length * tools.getCellSize());\n\n                    // Append panel elements\n                    dataPanel.append(\n                        $row.clone().html(yearArr.join(\"\")),\n                        $row.clone().html(monthArr.join(\"\")),\n                        $row.clone().html(dayArr.join(\"\")),\n                        $row.clone().html(dowArr.join(\"\"))\n                    );\n                    break;\n\n                // **Days (default)**\n                default:\n                    range = tools.parseDateRange(element.dateStart, element.dateEnd);\n\n                    var dateBefore = ktkGetNextDate(range[0], -1);\n                    year = dateBefore.getFullYear();\n                    month = dateBefore.getMonth();\n                    //day = dateBefore; // <- never used?\n\n                    for (i = 0, len = range.length; i < len; i++) {\n                        rday = range[i];\n\n                        // Fill years\n                        if (rday.getFullYear() !== year) {\n                            yearArr.push(\n                                '<div class=\"row header year\" style=\"width:' +\n                                tools.getCellSize() * scaleUnitsThisYear +\n                                'px;\"><div class=\"fn-label\">' +\n                                year +\n                                '</div></div>');\n                            year = rday.getFullYear();\n                            scaleUnitsThisYear = 0;\n                        }\n                        scaleUnitsThisYear++;\n\n                        // Fill months\n                        if (rday.getMonth() !== month) {\n                            monthArr.push(\n                                '<div class=\"row header month\" style=\"width:' +\n                                tools.getCellSize() * scaleUnitsThisMonth +\n                                'px;\"><div class=\"fn-label\">' +\n                                settings.months[month] +\n                                '</div></div>');\n                            month = rday.getMonth();\n                            scaleUnitsThisMonth = 0;\n                        }\n                        scaleUnitsThisMonth++;\n\n                        day = rday.getDay();\n                        dayClass = dowClass[day];\n                        if ( tools.isHoliday(rday) ) {\n                            dayClass = \"holiday\";\n                        }\n\n                        dayArr.push(\n                            '<div class=\"row date ' + dayClass + '\"' +\n                            ' id=\"dh-' + tools.genId(rday) +\n                            '\" data-offset=\"' + i * tools.getCellSize() +\n                            '\" data-repdate=\"' + rday.getRepDate(settings.scale) + '\">' +\n                            '<div class=\"fn-label\">' + rday.getDate() + '</div></div>');\n                        dowArr.push(\n                            '<div class=\"row day ' + dayClass + '\"' +\n                            ' id=\"dw-' + tools.genId(rday) +\n                            '\" data-repdate=\"' + rday.getRepDate(settings.scale) + '\">' +\n                            '<div class=\"fn-label\">' + settings.dow[day] + '</div></div>');\n                    } //for\n\n                    // Last year\n                    yearArr.push(\n                        '<div class=\"row header year\" style=\"width: ' +\n                        tools.getCellSize() * scaleUnitsThisYear + 'px;\"><div class=\"fn-label\">' +\n                        year +\n                        '</div></div>');\n\n                    // Last month\n                    monthArr.push(\n                        '<div class=\"row header month\" style=\"width: ' +\n                        tools.getCellSize() * scaleUnitsThisMonth + 'px\"><div class=\"fn-label\">' +\n                        settings.months[month] +\n                        '</div></div>');\n\n                    dataPanel = core.dataPanel(element, range.length * tools.getCellSize());\n\n                    // Append panel elements\n                    dataPanel.append(\n                        $row.clone().html(yearArr.join(\"\")),\n                        $row.clone().html(monthArr.join(\"\")),\n                        $row.clone().html(dayArr.join(\"\")),\n                        $row.clone().html(dowArr.join(\"\"))\n                    );\n                }\n\n                return $('<div class=\"rightPanel\"></div>').append(dataPanel);\n            },\n\n            // **Navigation**\n            navigation: function (element) {\n                var ganttNavigate = null;\n                // Scrolling navigation is provided by setting\n                // `settings.navigate='scroll'`\n                if (settings.navigate === \"scroll\") {\n                    ganttNavigate = $('<div class=\"navigate\" />')\n                        .append($('<div class=\"nav-slider\" />')\n                            .append($('<div class=\"nav-slider-left\" />')\n                                .append($('<button type=\"button\" class=\"nav-link nav-page-back\"/>')\n                                    .html('&lt;')\n                                    .click(function () {\n                                        core.navigatePage(element, -1);\n                                    }))\n                                .append($('<div class=\"page-number\"/>')\n                                        .append($('<span/>')\n                                            .html(element.pageNum + 1 + ' / ' + element.pageCount)))\n                                .append($('<button type=\"button\" class=\"nav-link nav-page-next\"/>')\n                                    .html('&gt;')\n                                    .click(function () {\n                                        core.navigatePage(element, 1);\n                                    }))\n                                .append($('<button type=\"button\" class=\"nav-link nav-now\"/>')\n                                    .html('&#9679;')\n                                    .click(function () {\n                                        core.navigateTo(element, 'now');\n                                    }))\n                                .append($('<button type=\"button\" class=\"nav-link nav-prev-week\"/>')\n                                    .html('&lt;&lt;')\n                                    .click(function () {\n                                        if (settings.scale === 'hours') {\n                                            core.navigateTo(element, tools.getCellSize() * 8);\n                                        } else if (settings.scale === 'days') {\n                                            core.navigateTo(element, tools.getCellSize() * 30);\n                                        } else if (settings.scale === 'weeks') {\n                                            core.navigateTo(element, tools.getCellSize() * 12);\n                                        } else if (settings.scale === 'months') {\n                                            core.navigateTo(element, tools.getCellSize() * 6);\n                                        }\n                                    }))\n                                .append($('<button type=\"button\" class=\"nav-link nav-prev-day\"/>')\n                                    .html('&lt;')\n                                    .click(function () {\n                                        if (settings.scale === 'hours') {\n                                            core.navigateTo(element, tools.getCellSize() * 4);\n                                        } else if (settings.scale === 'days') {\n                                            core.navigateTo(element, tools.getCellSize() * 7);\n                                        } else if (settings.scale === 'weeks') {\n                                            core.navigateTo(element, tools.getCellSize() * 4);\n                                        } else if (settings.scale === 'months') {\n                                            core.navigateTo(element, tools.getCellSize() * 3);\n                                        }\n                                    })))\n                            .append($('<div class=\"nav-slider-content\" />')\n                                    .append($('<div class=\"nav-slider-bar\" />')\n                                            .append($('<a class=\"nav-slider-button\" />')\n                                                )\n                                                .mousedown(function (e) {\n                                                    e.preventDefault();\n                                                    element.scrollNavigation.scrollerMouseDown = true;\n                                                    core.sliderScroll(element, e);\n                                                })\n                                                .mousemove(function (e) {\n                                                    if (element.scrollNavigation.scrollerMouseDown) {\n                                                        core.sliderScroll(element, e);\n                                                    }\n                                                })\n                                            )\n                                        )\n                            .append($('<div class=\"nav-slider-right\" />')\n                                .append($('<button type=\"button\" class=\"nav-link nav-next-day\"/>')\n                                    .html('&gt;')\n                                    .click(function () {\n                                        if (settings.scale === 'hours') {\n                                            core.navigateTo(element, tools.getCellSize() * -4);\n                                        } else if (settings.scale === 'days') {\n                                            core.navigateTo(element, tools.getCellSize() * -7);\n                                        } else if (settings.scale === 'weeks') {\n                                            core.navigateTo(element, tools.getCellSize() * -4);\n                                        } else if (settings.scale === 'months') {\n                                            core.navigateTo(element, tools.getCellSize() * -3);\n                                        }\n                                    }))\n                            .append($('<button type=\"button\" class=\"nav-link nav-next-week\"/>')\n                                    .html('&gt;&gt;')\n                                    .click(function () {\n                                        if (settings.scale === 'hours') {\n                                            core.navigateTo(element, tools.getCellSize() * -8);\n                                        } else if (settings.scale === 'days') {\n                                            core.navigateTo(element, tools.getCellSize() * -30);\n                                        } else if (settings.scale === 'weeks') {\n                                            core.navigateTo(element, tools.getCellSize() * -12);\n                                        } else if (settings.scale === 'months') {\n                                            core.navigateTo(element, tools.getCellSize() * -6);\n                                        }\n                                    }))\n                                .append($('<button type=\"button\" class=\"nav-link nav-zoomIn\"/>')\n                                    .html('&#43;')\n                                    .click(function () {\n                                        core.zoomInOut(element, -1);\n                                    }))\n                                .append($('<button type=\"button\" class=\"nav-link nav-zoomOut\"/>')\n                                    .html('&#45;')\n                                    .click(function () {\n                                        core.zoomInOut(element, 1);\n                                    }))\n                                    )\n                                );\n                    $(document).mouseup(function () {\n                        element.scrollNavigation.scrollerMouseDown = false;\n                    });\n                // Button navigation is provided by setting `settings.navigation='buttons'`\n                } else {\n                    ganttNavigate = $('<div class=\"navigate\" />')\n                        .append($('<button type=\"button\" class=\"nav-link nav-page-back\"/>')\n                            .html('&lt;')\n                            .click(function () {\n                                core.navigatePage(element, -1);\n                            }))\n                        .append($('<div class=\"page-number\"/>')\n                                .append($('<span/>')\n                                    .html(element.pageNum + 1 + ' / ' + element.pageCount)))\n                        .append($('<button type=\"button\" class=\"nav-link nav-page-next\"/>')\n                            .html('&gt;')\n                            .click(function () {\n                                core.navigatePage(element, 1);\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-begin\"/>')\n                            .html('&#124;&lt;')\n                            .click(function () {\n                                core.navigateTo(element, 'begin');\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-prev-week\"/>')\n                            .html('&lt;&lt;')\n                            .click(function () {\n                                core.navigateTo(element, tools.getCellSize() * 7);\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-prev-day\"/>')\n                            .html('&lt;')\n                            .click(function () {\n                                core.navigateTo(element, tools.getCellSize());\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-now\"/>')\n                            .html('&#9679;')\n                            .click(function () {\n                                core.navigateTo(element, 'now');\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-next-day\"/>')\n                            .html('&gt;')\n                            .click(function () {\n                                core.navigateTo(element, tools.getCellSize() * -1);\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-next-week\"/>')\n                            .html('&gt;&gt;')\n                            .click(function () {\n                                core.navigateTo(element, tools.getCellSize() * -7);\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-end\"/>')\n                            .html('&gt;&#124;')\n                            .click(function () {\n                                core.navigateTo(element, 'end');\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-zoomIn\"/>')\n                            .html('&#43;')\n                            .click(function () {\n                                core.zoomInOut(element, -1);\n                            }))\n                        .append($('<button type=\"button\" class=\"nav-link nav-zoomOut\"/>')\n                            .html('&#45;')\n                            .click(function () {\n                                core.zoomInOut(element, 1);\n                            }));\n                }\n                return $('<div class=\"bottom\"></div>').append(ganttNavigate);\n            },\n\n            // **Progress Bar**\n            // Return an element representing a progress of position within the entire chart\n            createProgressBar: function (days, label, desc, classNames, dataObj) {\n                label = label || \"\";\n                var cellWidth = tools.getCellSize();\n                var barMarg = tools.getProgressBarMargin() || 0;\n                var bar = $('<div class=\"bar\"><div class=\"fn-label\">' + label + '</div></div>')\n                        .css({\n                            width: ((cellWidth * days) - barMarg) + 2\n                        })\n                        .data(\"dataObj\", dataObj);\n                if (desc) {\n                    bar\n                      .mouseenter(function (e) {\n                          var hint = $('<div class=\"fn-gantt-hint\" />').html(desc);\n                          $(\"body\").append(hint);\n                          hint.css(\"left\", e.pageX);\n                          hint.css(\"top\", e.pageY);\n                          hint.show();\n                      })\n                      .mouseleave(function () {\n                          $(\".fn-gantt-hint\").remove();\n                      })\n                      .mousemove(function (e) {\n                          $(\".fn-gantt-hint\").css(\"left\", e.pageX);\n                          $(\".fn-gantt-hint\").css(\"top\", e.pageY + 15);\n                      });\n                }\n                if (classNames) {\n                    bar.addClass(classNames);\n                }\n                bar.click(function (e) {\n                    e.stopPropagation();\n                    settings.onItemClick($(this).data(\"dataObj\"));\n                });\n                return bar;\n            },\n\n            // Remove the `wd` (weekday) class and add `today` class to the\n            // current day/week/month (depending on the current scale)\n            markNow: function (element) {\n                var cd = new Date().setHours(0, 0, 0, 0);\n                switch (settings.scale) {\n                case \"weeks\":\n                    $(element).find(':findweek(\"' + cd + '\")').removeClass('wd').addClass('today');\n                    break;\n                case \"months\":\n                    $(element).find(':findmonth(\"' + cd + '\")').removeClass('wd').addClass('today');\n                    break;\n                case \"days\":\n                    /* falls through */\n                case \"hours\":\n                    /* falls through */\n                default:\n                    $(element).find(':findday(\"' + cd + '\")').removeClass('wd').addClass('today');\n                }\n            },\n\n            // **Fill the Chart**\n            // Parse the data and fill the data panel\n            fillData: function (element, datapanel, leftpanel /* <- never used? */) {\n                var invertColor = function (colStr) {\n                    try {\n                        colStr = colStr.replace(\"rgb(\", \"\").replace(\")\", \"\");\n                        var rgbArr = colStr.split(\",\");\n                        var R = parseInt(rgbArr[0], 10);\n                        var G = parseInt(rgbArr[1], 10);\n                        var B = parseInt(rgbArr[2], 10);\n                        var gray = Math.round((255 - (0.299 * R + 0.587 * G + 0.114 * B)) * 0.9);\n                        return \"rgb(\" + gray + \", \" + gray + \", \" + gray + \")\";\n                    } catch (err) {\n                        return \"\";\n                    }\n                };\n                // Loop through the values of each data element and set a row\n                $.each(element.data, function (i, entry) {\n                    if (i >= element.pageNum * settings.itemsPerPage &&\n                        i < (element.pageNum * settings.itemsPerPage + settings.itemsPerPage)) {\n\n                        $.each(entry.values, function (j, day) {\n                            var _bar;\n                            var from, to, cFrom, cTo, dFrom, dTo, dl;\n                            var topEl, top;\n                            switch (settings.scale) {\n                            // **Hourly data**\n                            case \"hours\":\n                                dFrom = tools.genId(tools.dateDeserialize(day.from), element.scaleStep);\n                                from = $(element).find('#dh-' + dFrom);\n                                dTo = tools.genId(tools.dateDeserialize(day.to), element.scaleStep);\n                                to = $(element).find('#dh-' + dTo);\n                                cFrom = from.data(\"offset\");\n                                cTo = to.data(\"offset\");\n                                dl = Math.floor((cTo - cFrom) / tools.getCellSize()) + 1;\n\n                                _bar = core.createProgressBar(dl, day.label, day.desc, day.customClass, day.dataObj);\n\n                                // find row\n                                topEl = $(element).find(\"#rowheader\" + i);\n                                top = tools.getCellSize() * 5 + 2 + topEl.data(\"offset\");\n                                _bar.css({ 'top': top, 'left': Math.floor(cFrom) });\n\n                                datapanel.append(_bar);\n                                break;\n\n                            // **Weekly data**\n                            case \"weeks\":\n                                dFrom = tools.dateDeserialize(day.from);\n                                dTo = tools.dateDeserialize(day.to);\n\n                                from = $(element).find(\"#\" + dFrom.getWeekId());\n                                cFrom = from.data(\"offset\");\n                                to = $(element).find(\"#\" + dTo.getWeekId());\n                                cTo = to.data(\"offset\");\n                                dl = Math.round((cTo - cFrom) / tools.getCellSize()) + 1;\n\n                                _bar = core.createProgressBar(dl, day.label, day.desc, day.customClass, day.dataObj);\n\n                                // find row\n                                topEl = $(element).find(\"#rowheader\" + i);\n                                top = tools.getCellSize() * 3 + 2 + topEl.data(\"offset\");\n                                _bar.css({ 'top': top, 'left': Math.floor(cFrom) });\n\n                                datapanel.append(_bar);\n                                break;\n\n                            // **Monthly data**\n                            case \"months\":\n                                dFrom = tools.dateDeserialize(day.from);\n                                dTo = tools.dateDeserialize(day.to);\n\n                                if (dFrom.getDate() <= 3 && dFrom.getMonth() === 0) {\n                                    dFrom.setDate(dFrom.getDate() + 4);\n                                }\n\n                                if (dFrom.getDate() <= 3 && dFrom.getMonth() === 0) {\n                                    dFrom.setDate(dFrom.getDate() + 4);\n                                }\n\n                                if (dTo.getDate() <= 3 && dTo.getMonth() === 0) {\n                                    dTo.setDate(dTo.getDate() + 4);\n                                }\n\n                                from = $(element).find(\"#dh-\" + tools.genId(dFrom));\n                                cFrom = from.data(\"offset\");\n                                to = $(element).find(\"#dh-\" + tools.genId(dTo));\n                                cTo = to.data(\"offset\");\n                                dl = Math.round((cTo - cFrom) / tools.getCellSize()) + 1;\n\n                                _bar = core.createProgressBar(dl, day.label, day.desc, day.customClass, day.dataObj);\n\n                                // find row\n                                topEl = $(element).find(\"#rowheader\" + i);\n                                top = tools.getCellSize() * 2 + 2 + topEl.data(\"offset\");\n                                _bar.css({ 'top': top, 'left': Math.floor(cFrom) });\n\n                                datapanel.append(_bar);\n                                break;\n\n                            // **Days**\n                            case \"days\":\n                                /* falls through */\n                            default:\n                                dFrom = tools.genId(tools.dateDeserialize(day.from));\n                                dTo = tools.genId(tools.dateDeserialize(day.to));\n                                from = $(element).find(\"#dh-\" + dFrom);\n                                cFrom = from.data(\"offset\");\n                                dl = Math.floor((dTo - dFrom) / UTC_DAY_IN_MS) + 1;\n                                _bar = core.createProgressBar(dl, day.label, day.desc, day.customClass, day.dataObj);\n\n                                // find row\n                                topEl = $(element).find(\"#rowheader\" + i);\n                                top = tools.getCellSize() * 4 + 2 + topEl.data(\"offset\");\n                                _bar.css({ 'top': top, 'left': Math.floor(cFrom) });\n\n                                datapanel.append(_bar);\n                            }\n\n                            var $l = _bar.find(\".fn-label\");\n                            if ($l && _bar.length) {\n                                var gray = invertColor(_bar[0].style.backgroundColor);\n                                $l.css(\"color\", gray);\n                            } else if ($l) {\n                                $l.css(\"color\", \"\");\n                            }\n                        });\n\n                    }\n                });\n            },\n            // **Navigation**\n            navigateTo: function (element, val) {\n                var $rightPanel = $(element).find(\".fn-gantt .rightPanel\");\n                var $dataPanel = $rightPanel.find(\".dataPanel\");\n                var rightPanelWidth = $rightPanel.width();\n                var dataPanelWidth = $dataPanel.width();\n                var shift = function () {\n                  core.repositionLabel(element);\n                };\n                var maxLeft, curMarg;\n                switch (val) {\n                case \"begin\":\n                    $dataPanel.animate({ \"margin-left\": \"0px\" }, \"fast\", shift);\n                    element.scrollNavigation.panelMargin = 0;\n                    break;\n                case \"end\":\n                    var mLeft = dataPanelWidth - rightPanelWidth;\n                    element.scrollNavigation.panelMargin = mLeft * -1;\n                    $dataPanel.animate({ \"margin-left\": \"-\" + mLeft }, \"fast\", shift);\n                    break;\n                case \"now\":\n                    if (!element.scrollNavigation.canScroll || !$dataPanel.find(\".today\").length) {\n                        return false;\n                    }\n                    maxLeft = (dataPanelWidth - rightPanelWidth) * -1;\n                    curMarg = $dataPanel.css(\"margin-left\").replace(\"px\", \"\");\n                    val = $dataPanel.find(\".today\").offset().left - $dataPanel.offset().left;\n                    val *= -1;\n                    if (val > 0) {\n                        val = 0;\n                    } else if (val < maxLeft) {\n                        val = maxLeft;\n                    }\n                    $dataPanel.animate({ \"margin-left\": val }, \"fast\", shift);\n                    element.scrollNavigation.panelMargin = val;\n                    break;\n                default:\n                    maxLeft = (dataPanelWidth - rightPanelWidth) * -1;\n                    curMarg = $dataPanel.css(\"margin-left\").replace(\"px\", \"\");\n                    val = parseInt(curMarg, 10) + val;\n                    if (val <= 0 && val >= maxLeft) {\n                        $dataPanel.animate({ \"margin-left\": val }, \"fast\", shift);\n                    }\n                    element.scrollNavigation.panelMargin = val;\n                }\n                core.synchronizeScroller(element);\n            },\n\n            // Navigate to a specific page\n            navigatePage: function (element, val) {\n                if ((element.pageNum + val) >= 0 &&\n                    (element.pageNum + val) < Math.ceil(element.rowsNum / settings.itemsPerPage)) {\n                    core.waitToggle(element, function () {\n                        element.pageNum += val;\n                        element.hPosition = $(\".fn-gantt .dataPanel\").css(\"margin-left\").replace(\"px\", \"\");\n                        element.scaleOldWidth = false;\n                        core.init(element);\n                    });\n                }\n            },\n\n            // Change zoom level\n            zoomInOut: function (element, val) {\n                core.waitToggle(element, function () {\n\n                    var zoomIn = (val < 0);\n\n                    var scaleSt = element.scaleStep + val * 3;\n                    scaleSt = scaleSt <= 1 ? 1 : scaleSt === 4 ? 3 : scaleSt;\n                    var scale = settings.scale;\n                    var headerRows = element.headerRows;\n                    if (settings.scale === \"hours\" && scaleSt >= 13) {\n                        scale = \"days\";\n                        headerRows = 4;\n                        scaleSt = 13;\n                    } else if (settings.scale === \"days\" && zoomIn) {\n                        scale = \"hours\";\n                        headerRows = 5;\n                        scaleSt = 12;\n                    } else if (settings.scale === \"days\" && !zoomIn) {\n                        scale = \"weeks\";\n                        headerRows = 3;\n                        scaleSt = 13;\n                    } else if (settings.scale === \"weeks\" && !zoomIn) {\n                        scale = \"months\";\n                        headerRows = 2;\n                        scaleSt = 14;\n                    } else if (settings.scale === \"weeks\" && zoomIn) {\n                        scale = \"days\";\n                        headerRows = 4;\n                        scaleSt = 13;\n                    } else if (settings.scale === \"months\" && zoomIn) {\n                        scale = \"weeks\";\n                        headerRows = 3;\n                        scaleSt = 13;\n                    }\n\n                    // do nothing if attempting to zoom past max/min\n                    if ((zoomIn && $.inArray(scale, scales) < $.inArray(settings.minScale, scales)) ||\n                        (!zoomIn && $.inArray(scale, scales) > $.inArray(settings.maxScale, scales))) {\n                        core.init(element);\n                        return;\n                    }\n\n                    element.scaleStep = scaleSt;\n                    settings.scale = scale;\n                    element.headerRows = headerRows;\n                    var $rightPanel = $(element).find(\".fn-gantt .rightPanel\");\n                    var $dataPanel = $rightPanel.find(\".dataPanel\");\n                    element.hPosition = $dataPanel.css(\"margin-left\").replace(\"px\", \"\");\n                    element.scaleOldWidth = ($dataPanel.width() - $rightPanel.width());\n\n                    if (settings.useCookie) {\n                        $.cookie(settings.cookieKey + \"CurrentScale\", settings.scale);\n                        // reset scrollPos\n                        $.cookie(settings.cookieKey + \"ScrollPos\", null);\n                    }\n                    core.init(element);\n                });\n            },\n\n            // Move chart via mouseclick\n            mouseScroll: function (element, e) {\n                var $dataPanel = $(element).find(\".fn-gantt .dataPanel\");\n                $dataPanel.css(\"cursor\", \"move\");\n                var bPos = $dataPanel.offset();\n                var mPos = element.scrollNavigation.mouseX === null ? e.pageX : element.scrollNavigation.mouseX;\n                var delta = e.pageX - mPos;\n                element.scrollNavigation.mouseX = e.pageX;\n\n                core.scrollPanel(element, delta);\n\n                clearTimeout(element.scrollNavigation.repositionDelay);\n                element.scrollNavigation.repositionDelay = setTimeout(core.repositionLabel, 50, element);\n            },\n\n            // Move chart via mousewheel\n            wheelScroll: function (element, e) {\n                e.preventDefault(); // e is a jQuery Event\n\n                // attempts to normalize scroll wheel velocity\n                var delta = ( 'detail' in e ? e.detail :\n                              'wheelDelta' in e.originalEvent ? - 1/120 * e.originalEvent.wheelDelta :\n                              e.originalEvent.deltaY ? e.originalEvent.deltaY / Math.abs(e.originalEvent.deltaY) :\n                              e.originalEvent.detail );\n\n                // simpler normalization, ignoring per-device/browser/platform acceleration & semantic variations\n                //var delta = e.detail || - (e = e.originalEvent).wheelData || e.deltaY /* || e.deltaX */ || e.detail;\n                //delta = ( delta / Math.abs(delta) ) || 0;\n\n                core.scrollPanel(element, -50 * delta);\n\n                clearTimeout(element.scrollNavigation.repositionDelay);\n                element.scrollNavigation.repositionDelay = setTimeout(core.repositionLabel, 50, element);\n            },\n\n            // Move chart via slider control\n            sliderScroll: function (element, e) {\n                var $sliderBar = $(element).find(\".nav-slider-bar\");\n                var $sliderBarBtn = $sliderBar.find(\".nav-slider-button\");\n                var $rightPanel = $(element).find(\".fn-gantt .rightPanel\");\n                var $dataPanel = $rightPanel.find(\".dataPanel\");\n\n                var bPos = $sliderBar.offset();\n                var bWidth = $sliderBar.width();\n                var wButton = $sliderBarBtn.width();\n\n                var pos, mLeft;\n\n                if ((e.pageX >= bPos.left) && (e.pageX <= bPos.left + bWidth)) {\n                    pos = e.pageX - bPos.left;\n                    pos = pos - wButton / 2;\n                    $sliderBarBtn.css(\"left\", pos);\n\n                    mLeft = $dataPanel.width() - $rightPanel.width();\n\n                    var pPos = pos * mLeft / bWidth * -1;\n                    if (pPos >= 0) {\n                        $dataPanel.css(\"margin-left\", \"0px\");\n                        element.scrollNavigation.panelMargin = 0;\n                    } else if (pos >= bWidth - (wButton * 1)) {\n                        $dataPanel.css(\"margin-left\", mLeft * -1);\n                        element.scrollNavigation.panelMargin = mLeft * -1;\n                    } else {\n                        $dataPanel.css(\"margin-left\", pPos);\n                        element.scrollNavigation.panelMargin = pPos;\n                    }\n                    clearTimeout(element.scrollNavigation.repositionDelay);\n                    element.scrollNavigation.repositionDelay = setTimeout(core.repositionLabel, 5, element);\n                }\n            },\n\n            // Update scroll panel margins\n            scrollPanel: function (element, delta) {\n                if (!element.scrollNavigation.canScroll) {\n                    return false;\n                }\n                var _panelMargin = parseInt(element.scrollNavigation.panelMargin, 10) + delta;\n                if (_panelMargin > 0) {\n                    element.scrollNavigation.panelMargin = 0;\n                    $(element).find(\".fn-gantt .dataPanel\").css(\"margin-left\", element.scrollNavigation.panelMargin);\n                } else if (_panelMargin < element.scrollNavigation.panelMaxPos * -1) {\n                    element.scrollNavigation.panelMargin = element.scrollNavigation.panelMaxPos * -1;\n                    $(element).find(\".fn-gantt .dataPanel\").css(\"margin-left\", element.scrollNavigation.panelMargin);\n                } else {\n                    element.scrollNavigation.panelMargin = _panelMargin;\n                    $(element).find(\".fn-gantt .dataPanel\").css(\"margin-left\", element.scrollNavigation.panelMargin);\n                }\n                core.synchronizeScroller(element);\n            },\n\n            // Synchronize scroller\n            synchronizeScroller: function (element) {\n                if (settings.navigate !== \"scroll\") { return; }\n                var $rightPanel = $(element).find(\".fn-gantt .rightPanel\");\n                var $dataPanel = $rightPanel.find(\".dataPanel\");\n                var $sliderBar = $(element).find(\".nav-slider-bar\");\n                var $sliderBtn = $sliderBar.find(\".nav-slider-button\");\n\n                var bWidth = $sliderBar.width();\n                var wButton = $sliderBtn.width();\n\n                var mLeft = $dataPanel.width() - $rightPanel.width();\n                var hPos = $dataPanel.css(\"margin-left\") || 0;\n                if (hPos) {\n                    hPos = hPos.replace(\"px\", \"\");\n                }\n                var pos = hPos * bWidth / mLeft - $sliderBtn.width() * 0.25;\n                pos = pos > 0 ? 0 : (pos * -1 >= bWidth - (wButton * 0.75)) ? (bWidth - (wButton * 1.25)) * -1 : pos;\n                $sliderBtn.css(\"left\", pos * -1);\n            },\n\n            // Reposition data labels\n            repositionLabel: function (element) {\n                setTimeout(function () {\n                    var $dataPanel;\n                    if (!element) {\n                        $dataPanel = $(\".fn-gantt .rightPanel .dataPanel\");\n                    } else {\n                        var $rightPanel = $(element).find(\".fn-gantt .rightPanel\");\n                        $dataPanel = $rightPanel.find(\".dataPanel\");\n                    }\n\n                    if (settings.useCookie) {\n                        $.cookie(settings.cookieKey + \"ScrollPos\", $dataPanel.css(\"margin-left\").replace(\"px\", \"\"));\n                    }\n                }, 500);\n            },\n\n            // waitToggle\n            waitToggle: function (element, showCallback) {\n                if ( $.isFunction(showCallback) ) {\n                    var $elt = $(element);\n                    var eo = $elt.offset();\n                    var ew = $elt.outerWidth();\n                    var eh = $elt.outerHeight();\n\n                    if (!element.loader) {\n                        element.loader = $('<div class=\"fn-gantt-loader\">' +\n                        '<div class=\"fn-gantt-loader-spinner\"><span>' + settings.waitText + '</span></div></div>');\n                    }\n                    $elt.append(element.loader);\n                    setTimeout(showCallback, 500);\n\n                } else if (element.loader) {\n                  element.loader.detach();\n                }\n            }\n        };\n\n        // Utility functions\n        // =================\n        var tools = {\n\n            // Return the maximum available date in data depending on the scale\n            getMaxDate: function (element) {\n                var maxDate = null;\n                $.each(element.data, function (i, entry) {\n                    $.each(entry.values, function (i, date) {\n                        maxDate = maxDate < tools.dateDeserialize(date.to) ? tools.dateDeserialize(date.to) : maxDate;\n                    });\n                });\n                maxDate = maxDate || new Date();\n                var bd;\n                switch (settings.scale) {\n                case \"hours\":\n                    maxDate.setHours(Math.ceil((maxDate.getHours()) / element.scaleStep) * element.scaleStep);\n                    maxDate.setHours(maxDate.getHours() + element.scaleStep * 3);\n                    break;\n                case \"weeks\":\n                    // wtf is happening here?\n                    bd = new Date(maxDate.getTime());\n                    bd = new Date(bd.setDate(bd.getDate() + 3 * 7));\n                    var md = Math.floor(bd.getDate() / 7) * 7;\n                    maxDate = new Date(bd.getFullYear(), bd.getMonth(), md === 0 ? 4 : md - 3);\n                    break;\n                case \"months\":\n                    bd = new Date(maxDate.getFullYear(), maxDate.getMonth(), 1);\n                    bd.setMonth(bd.getMonth() + 2);\n                    maxDate = new Date(bd.getFullYear(), bd.getMonth(), 1);\n                    break;\n                case \"days\":\n                    /* falls through */\n                default:\n                    maxDate.setHours(0);\n                    maxDate.setDate(maxDate.getDate() + 3);\n                }\n                return maxDate;\n            },\n\n            // Return the minimum available date in data depending on the scale\n            getMinDate: function (element) {\n                var minDate = null;\n                $.each(element.data, function (i, entry) {\n                    $.each(entry.values, function (i, date) {\n                        minDate = minDate > tools.dateDeserialize(date.from) ||\n                            minDate === null ? tools.dateDeserialize(date.from) : minDate;\n                    });\n                });\n                minDate = minDate || new Date();\n                switch (settings.scale) {\n                case \"hours\":\n                    minDate.setHours(Math.floor((minDate.getHours()) / element.scaleStep) * element.scaleStep);\n                    minDate.setHours(minDate.getHours() - element.scaleStep * 3);\n                    break;\n                case \"weeks\":\n                    // wtf is happening here?\n                    var bd = new Date(minDate.getTime());\n                    bd = new Date(bd.setDate(bd.getDate() - 3 * 7));\n                    var md = Math.floor(bd.getDate() / 7) * 7;\n                    minDate = new Date(bd.getFullYear(), bd.getMonth(), md === 0 ? 4 : md - 3);\n                    break;\n                case \"months\":\n                    minDate.setHours(0, 0, 0, 0);\n                    minDate.setDate(1);\n                    minDate.setMonth(minDate.getMonth() - 3);\n                    break;\n                case \"days\":\n                    /* falls through */\n                default:\n                    minDate.setHours(0, 0, 0, 0);\n                    minDate.setDate(minDate.getDate() - 3);\n                }\n                return minDate;\n            },\n\n            // Return an array of Date objects between `from` and `to`\n            parseDateRange: function (from, to) {\n                var current = new Date(from.getTime());\n                var ret = [];\n                var i = 0;\n                do {\n                    ret[i++] = new Date(current.getTime());\n                    current.setDate(current.getDate() + 1);\n                } while (current <= to);\n                return ret;\n            },\n\n            // Return an array of Date objects between `from` and `to`,\n            // scaled hourly\n            parseTimeRange: function (from, to, scaleStep) {\n                var current = new Date(from);\n                var end = new Date(to);\n\n                // GR: Fix begin\n                current.setHours(0, 0, 0, 0);\n\n                end.setMilliseconds(0);\n                end.setSeconds(0);\n                if (end.getMinutes() > 0 || end.getHours() > 0) {\n                    end.setMinutes(0);\n                    end.setHours(0);\n                    end.setTime(end.getTime() + UTC_DAY_IN_MS);\n                }\n                // GR: Fix end\n\n                var ret = [];\n                var i = 0;\n                for(;;) {\n                    var dayStartTime = new Date(current);\n                    dayStartTime.setHours(Math.floor((current.getHours()) / scaleStep) * scaleStep);\n\n                    if (ret[i] && dayStartTime.getDay() !== ret[i].getDay()) {\n                        // If mark-cursor jumped to next day, make sure it starts at 0 hours\n                        dayStartTime.setHours(0);\n                    }\n                    ret[i] = dayStartTime;\n\n                    // Note that we use \">\" because we want to include the end-time point.\n                    if (current > to)  { break; }\n\n                    /* BUG-2: current is moved backwards producing a dead-lock! (crashes chrome/IE/firefox)\n                     * SEE: https://github.com/taitems/jQuery.Gantt/issues/62\n                    if (current.getDay() !== ret[i].getDay()) {\n                       current.setHours(0);\n                    }\n                    */\n\n                    // GR Fix Begin\n                    current = ktkGetNextDate(dayStartTime, scaleStep);\n                    // GR Fix End\n\n                    i++;\n                }\n\n                return ret;\n            },\n\n            // Return an array of Date objects between a range of weeks\n            // between `from` and `to`\n            parseWeeksRange: function (from, to) {\n                var current = from.getDayForWeek();\n\n                var ret = [];\n                var i = 0;\n                do {\n                    ret[i++] = current.getDayForWeek();\n                    current.setDate(current.getDate() + 7);\n                } while (current <= to);\n\n                return ret;\n            },\n\n\n            // Return an array of Date objects between a range of months\n            // between `from` and `to`\n            parseMonthsRange: function (from, to) {\n                var current = new Date(from);\n                var end = new Date(to); // <- never used?\n\n                var ret = [];\n                var i = 0;\n                do {\n                    ret[i++] = new Date(current.getFullYear(), current.getMonth(), 1);\n                    current.setMonth(current.getMonth() + 1);\n                } while (current <= to);\n\n                return ret;\n            },\n\n            // Deserialize a date from a string or integer\n            dateDeserialize: function (date) {\n                if (typeof date === \"string\") {\n                    date = date.replace(/\\/Date\\((.*)\\)\\//, \"$1\");\n                    date = $.isNumeric(date) ? parseInt(date, 10) : $.trim(date);\n                }\n                return new Date( date );\n            },\n\n            // Generate an id for a date\n            genId: function (t) { // varargs\n                if ( $.isNumeric(t) ) {\n                    t = new Date(t);\n                }\n                switch (settings.scale) {\n                case \"hours\":\n                    var hour = t.getHours();\n                    if (arguments.length >= 2) {\n                        hour = (Math.floor(t.getHours() / arguments[1]) * arguments[1]);\n                    }\n                    return (new Date(t.getFullYear(), t.getMonth(), t.getDate(), hour)).getTime();\n                case \"weeks\":\n                    var y = t.getFullYear();\n                    var w = t.getWeekOfYear();\n                    var m = t.getMonth();\n                    if (m === 11 && w === 1) {\n                        y++;\n                    } else if (!m && w > 51) {\n                        y--;\n                    }\n                    return y + \"-\" + w;\n                case \"months\":\n                    return t.getFullYear() + \"-\" + t.getMonth();\n                case \"days\":\n                    /* falls through */\n                default:\n                    return (new Date(t.getFullYear(), t.getMonth(), t.getDate())).getTime();\n                }\n            },\n\n            // normalizes an array of dates into a map of start-of-day millisecond values\n            _datesToDays: function ( dates ) {\n                var dayMap = {};\n                for (var i = 0, len = dates.length, day; i < len; i++) {\n                    day = tools.dateDeserialize( dates[i] );\n                    dayMap[ day.setHours(0, 0, 0, 0) ] = true;\n                }\n                return dayMap;\n            },\n            // Returns true when the given date appears in the array of holidays, if provided\n            isHoliday: (function() { // IIFE\n                // short-circuits the function if no holidays option was passed\n                if (!settings.holidays || !settings.holidays.length) {\n                  return function () { return false; };\n                }\n                var holidays = false;\n                // returns the function that will be used to check for holidayness of a given date\n                return function(date) {\n                    if (!holidays) {\n                      holidays = tools._datesToDays( settings.holidays );\n                    }\n                    return !!holidays[\n                      // assumes numeric dates are already normalized to start-of-day\n                      $.isNumeric(date) ?\n                      date :\n                      ( new Date(date.getFullYear(), date.getMonth(), date.getDate()) ).getTime()\n                    ];\n                };\n            })(),\n\n            // Get the current cell height\n            getCellSize: function () {\n                if (typeof tools._getCellSize === \"undefined\") {\n                    var measure = $('<div style=\"display: none; position: absolute;\" class=\"fn-gantt\"><div class=\"row\"></div></div>');\n                    $(\"body\").append(measure);\n                    tools._getCellSize = measure.find(\".row\").height();\n                    measure.empty().remove();\n                }\n                return tools._getCellSize;\n            },\n\n            // Get the current page height\n            getPageHeight: function (element) {\n                return element.pageNum + 1 === element.pageCount ? element.rowsOnLastPage * tools.getCellSize() : settings.itemsPerPage * tools.getCellSize();\n            },\n\n            // Get the current margin size of the progress bar\n            getProgressBarMargin: function () {\n                if (typeof tools._getProgressBarMargin === \"undefined\") {\n                    var measure = $('<div style=\"display: none; position: absolute;\"><div class=\"fn-gantt\"><div class=\"rightPanel\"><div class=\"dataPanel\"><div class=\"row day\"><div class=\"bar\"></div></div></div></div></div></div>');\n                    var bar = measure.find(\".fn-gantt .rightPanel .day .bar\");\n                    $(\"body\").append(measure);\n                    tools._getProgressBarMargin = parseInt(bar.css(\"margin-left\").replace(\"px\", \"\"), 10);\n                    tools._getProgressBarMargin += parseInt(bar.css(\"margin-right\").replace(\"px\", \"\"), 10);\n                    measure.empty().remove();\n                }\n                return tools._getProgressBarMargin;\n            }\n        };\n\n\n        this.each(function () {\n            this.data = null;        // Received data\n            this.pageNum = 0;        // Current page number\n            this.pageCount = 0;      // Available pages count\n            this.rowsOnLastPage = 0; // How many rows on last page\n            this.rowsNum = 0;        // Number of total rows\n            this.hPosition = 0;      // Current position on diagram (Horizontal)\n            this.dateStart = null;\n            this.dateEnd = null;\n            this.scrollClicked = false;\n            this.scaleOldWidth = null;\n            this.headerRows = null;\n\n            // Update cookie with current scale\n            if (settings.useCookie) {\n                var sc = $.cookie(settings.cookieKey + \"CurrentScale\");\n                if (sc) {\n                    settings.scale = sc;\n                } else {\n                    $.cookie(settings.cookieKey + \"CurrentScale\", settings.scale);\n                }\n            }\n\n            switch (settings.scale) {\n            //case \"hours\":\n            //    this.headerRows = 5;\n            //    this.scaleStep = 8;\n            //    break;\n            case \"hours\":\n                this.headerRows = 5;\n                this.scaleStep = 1;\n                break;\n            case \"weeks\":\n                this.headerRows = 3;\n                this.scaleStep = 13;\n                break;\n            case \"months\":\n                this.headerRows = 2;\n                this.scaleStep = 14;\n                break;\n            case \"days\":\n                /* falls through */\n            default:\n                this.headerRows = 4;\n                this.scaleStep = 13;\n            }\n\n            this.scrollNavigation = {\n                panelMouseDown: false,\n                scrollerMouseDown: false,\n                mouseX: null,\n                panelMargin: 0,\n                repositionDelay: 0,\n                panelMaxPos: 0,\n                canScroll: true\n            };\n\n            this.gantt = null;\n            this.loader = null;\n\n            core.create(this);\n\n        });\n\n    };\n})(jQuery);\n","// extracted by mini-css-extract-plugin"],"sourceRoot":""}